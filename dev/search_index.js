var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CirculantAttention","category":"page"},{"location":"#CirculantAttention","page":"Home","title":"CirculantAttention","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CirculantAttention.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CirculantAttention]","category":"page"},{"location":"#CirculantAttention.DistanceSimilarity","page":"Home","title":"CirculantAttention.DistanceSimilarity","text":"DistanceSimilarity()\n\nUsed in circulant_attention, circulant_similarity, and circulant_adjacency to indicate use of distance similarity:\n\nS_ij = frac12mathrmsum(mathrmabs2 qi - kj)\n\nSee also DotSimilarity.\n\n\n\n\n\n","category":"type"},{"location":"#CirculantAttention.DotSimilarity","page":"Home","title":"CirculantAttention.DotSimilarity","text":"DotSimilarity()\n\nUsed in circulant_attention, circulant_similarity, and circulant_adjacency to indicate use of dot-product similarity:\n\nS_ij = mathrmReal(qi^H kj)\n\nSee also DistanceSimilarity.\n\n\n\n\n\n","category":"type"},{"location":"#CirculantAttention.circulant_adjacency-Tuple{CirculantAttention.AbstractSimilarity, Any, Any, Integer}","page":"Home","title":"CirculantAttention.circulant_adjacency","text":"circulant_adjacency(simfun::AbstractSimilarity, x, y, W::Int)\n\nEquivalent to (softmax ∘ circulant_similarity)(simfun, x, y, W).\n\nSee also circulant_similarity, NNlib.softmax.\n\n\n\n\n\n","category":"method"},{"location":"#CirculantAttention.circulant_attention-Tuple{Circulant, Any}","page":"Home","title":"CirculantAttention.circulant_attention","text":"y = circulant_attention(A::Circulant, x::AbstractArray)\ny = A ⊗ x # \\otimes\n\nApplies circulant matrix A to x. See also circulant_adjacency.\n\n\n\n\n\n","category":"method"},{"location":"#CirculantAttention.circulant_attention-Union{Tuple{T}, Tuple{N}, Tuple{Tv}, Tuple{CirculantAttention.AbstractSimilarity, T, T, T, Int64}} where {Tv, N, T<:AbstractArray{Tv, N}}","page":"Home","title":"CirculantAttention.circulant_attention","text":"y, A = circulant_attention(simfun::AbstractSimilarity, q, k, v, W::Int)\n\nPerform circulant attention on y=Av, where A is a row-softmax normalized  circulant-sparse attention matrix (A = rowsoftmax(S)). Each non-zero entry S_ij is generated via the similarity function acting on the channel representations of q and k  at (linearly indexed) pixels i, j (S_ij = mathrmsimfun(q_i k_j)). Adjacency matrix A is generated internal and returned as the  second argument. Note: q and k are internally scaled by sqrt(sqrt(channels)) before being passed to circulant_adjacency.\n\nSee also circulant_adjacency, circulant_similarity, DotSimilarity, DistanceSimilarity.\n\n\n\n\n\n","category":"method"},{"location":"#CirculantAttention.circulant_mh_attention-Union{Tuple{N}, Tuple{T}, Tuple{Ta}, Tuple{Circulant{Ta, 4, M, S, A} where {M, S, A<:AbstractArray{Ta, 4}}, AbstractArray{T, N}}} where {Ta, T, N}","page":"Home","title":"CirculantAttention.circulant_mh_attention","text":"y = circulant_mh_attention(A::Circulant, x::AbstractArray)\ny = A ⨷ x # \\Otimes\n\nApplies circulant matrix A (with channel dimension > 1) to x. See also circulant_attention, circulant_adjacency.\n\n\n\n\n\n","category":"method"},{"location":"#CirculantAttention.circulant_mh_attention-Union{Tuple{T}, Tuple{N}, Tuple{Tv}, Tuple{CirculantAttention.AbstractSimilarity, T, T, T, Int64, Int64}} where {Tv, N, T<:AbstractArray{Tv, N}}","page":"Home","title":"CirculantAttention.circulant_mh_attention","text":"y, A = circulant_mh_attention(simfun::AbstractSimilarity, q, k, v, W::Int, nheads::Int)\n\nPerforms circulant multi-head attention, i.e., performing circulant attetion of nheads-groups separately and concatenating the result along channels. The number of channels in q, k, v must be divisible by nheads. The returned adjacency matrix A will have size(A, 3) == nheads.\n\nSee also circulant_attention, DotSimilarity, DistanceSimilarity.\n\n\n\n\n\n","category":"method"},{"location":"#CirculantAttention.circulant_similarity-Union{Tuple{N}, Tuple{T}, Tuple{CirculantAttention.AbstractSimilarity, AbstractArray{T, N}, AbstractArray{T, N}, Integer}} where {T, N}","page":"Home","title":"CirculantAttention.circulant_similarity","text":"circulant_similarity(simfun::AbstractSimilarity, x, y, W::Int)\n\nReturns Circulant matrix with circulant-sparse data. Each non-zero S[i,j,b] is  populated by simfun evaluated at the linearized pixel locations of x and y,  i.e. S[i,j,b] = simfun(x[...,i,b], y[...,j,b], W) for max(i⃗, j⃗) ≤ W. The non-zero entrie  locations are determined by the windowsize W and number of spatial dimensions in x and y.\n\nSee also DotSimilarity, DistanceSimilarity.\n\n\n\n\n\n","category":"method"},{"location":"#NNlib.softmax-Tuple{Circulant}","page":"Home","title":"NNlib.softmax","text":"NNlib.softmax(A::Circulant)\n\nRow-wise softmax of Circulant matrix A. \n\n\n\n\n\n","category":"method"}]
}
